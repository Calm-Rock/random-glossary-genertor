const glossaryData = [
    { term: 'Aggregation', definition: 'The process of combining multiple measurements into exact or estimated statistics about the measurements that took place during an interval of time, during program execution.' },
    { term: 'API', definition: 'Application Programming Interface. In the OpenTelemetry project, used to define how telemetry data is generated per Data Source.' },
    { term: 'Application', definition: 'One or more Services designed for end users or other applications.' },
    { term: 'APM', definition: 'Application Performance Monitoring is about monitoring software applications, their performance (speed, reliability, availability, etc.) to detect issues, alerting, and tooling for finding the root cause.' },
    { term: 'Attribute', definition: "OpenTelemetry's word for Metadata. Adds key-value information to the entity producing telemetry. Used across Signals and Resources." },
    { term: 'Automatic Instrumentation', definition: 'Refers to telemetry collection methods that do not require the end-user to modify application\'s source code. Methods vary by programming language, and examples include bytecode injection or monkey patching.' },
    { term: 'Baggage', definition: 'A mechanism for propagating Metadata to help establish a causal relationship between events and services.' },
    { term: 'Client Library', definition: 'See Instrumented Library.' },
    { term: 'Client-side App', definition: 'A component of an Application that is not running inside a private infrastructure and is typically used directly by end-users. Examples of client-side apps are browser apps, mobile apps, and apps running on IoT devices.' },
    { term: 'Collector', definition: 'A vendor-agnostic implementation on how to receive, process, and export telemetry data. A single binary that can be deployed as an agent or gateway. Also known as the OpenTelemetry Collector.' },
    { term: 'Contrib', definition: 'Several Instrumentation Libraries and the Collector offer a set of core capabilities as well as a dedicated contrib repository for non-core capabilities including vendor Exporters.' },
    { term: 'Context Propagation', definition: 'Allows all Data Sources to share an underlying context mechanism for storing state and accessing data across the lifespan of a Transaction.' },
    { term: 'DAG', definition: 'Directed Acyclic Graph.' },
    { term: 'Data Source', definition: 'See Signal.' },
    { term: 'Dimension', definition: 'A term used specifically by Metrics. See Attribute.' },
    { term: 'Distributed Tracing', definition: 'Tracks the progression of a single Request, called a Trace, as it is handled by Services that make up an Application. A Distributed Trace transverses process, network, and security boundaries.' },
    { term: 'Distribution', definition: 'A distribution is a wrapper around an upstream OpenTelemetry repository with some customizations.' },
    { term: 'Event', definition: 'Something that happened where representation depends on the Data Source. For example, Spans.' },
    { term: 'Exporter', definition: 'Provides functionality to emit telemetry to consumers. Used by Instrumentation Libraries and the Collector. Exporters can be push- or pull-based.' },
    { term: 'Field', definition: 'A term used specifically by Log Records. Metadata can be added through defined fields, including Attributes and Resource. Other fields may also be considered Metadata, including severity and trace information.' },
    { term: 'gRPC', definition: 'A high-performance, open source universal RPC framework.' },
    { term: 'HTTP', definition: 'Short for Hypertext Transfer Protocol.' },
    { term: 'Instrumented Library', definition: 'Denotes the Library for which the telemetry signals (Traces, Metrics, Logs) are gathered.' },
    { term: 'Instrumentation Library', definition: 'Denotes the Library that provides the instrumentation for a given Instrumented Library. Instrumented Library and Instrumentation Library may be the same Library if it has built-in OpenTelemetry instrumentation.' },
    { term: 'JSON', definition: 'Short for JavaScript Object Notation.' },
    { term: 'Label', definition: 'A term used specifically by Metrics. See Metadata.' },
    { term: 'Language', definition: 'Programming Language.' },
    { term: 'Library', definition: 'A language-specific collection of behavior invoked by an interface.' },
    { term: 'Log', definition: 'Sometimes used to refer to a collection of Log Records. May be ambiguous since people also sometimes use Log to refer to a single Log Record, thus this term should be used carefully and in the context where ambiguity is possible additional qualifiers should be used (e.g. Log Record).' },
    { term: 'Log Record', definition: 'A recording of an Event. Typically, the record includes a timestamp indicating when the Event happened as well as other data that describes what happened, where it happened, etc.' },
    { term: 'Metadata', definition: 'A key-value pair, for example, foo="bar", added to an entity producing telemetry. OpenTelemetry calls these pairs Attributes. In addition, Metrics have Dimensions and Labels, while Logs have Fields.' },
    { term: 'Metric', definition: 'Records a data point, either raw measurements or predefined aggregation, as time series with Metadata.' },
    { term: 'OC', definition: 'Short form for OpenCensus.' },
    { term: 'OpenCensus', definition: 'A set of libraries for various languages that allow you to collect application metrics and distributed traces, then transfer the data to a backend of your choice in real time. Precursor to OpenTelemetry.' },
    { term: 'OpenTracing', definition: 'Vendor-neutral APIs and instrumentation for distributed tracing. Precursor to OpenTelemetry.' },
    { term: 'OT', definition: 'Short form for OpenTracing.' },
    { term: 'OTel', definition: 'Short form for OpenTelemetry.' },
    { term: 'OTelCol', definition: 'Short form for OpenTelemetry Collector.' },
    { term: 'OTLP', definition: 'Short for OpenTelemetry Protocol.' },
    { term: 'Processor', definition: 'The operation performed on data between being received and being exported. For example, batching. Used by Instrumentation Libraries and the Collector.' },
    { term: 'Propagators', definition: 'Used to serialize and deserialize specific parts of telemetry data such as span context and Baggage in Spans.' },
    { term: 'Proto', definition: 'Language-independent interface types.' },
    { term: 'Receiver', definition: 'The term used by the Collector to define how telemetry data is received. Receivers can be push- or pull-based.' },
    { term: 'Request', definition: 'See Distributed Tracing.' },
    { term: 'Resource', definition: 'Captures information about the entity producing telemetry as Attributes. For example, a process producing telemetry that is running in a container on Kubernetes has a process name, a pod name, a namespace, and possibly a deployment name. All four of these attributes can be included in the Resource.' },
    { term: 'REST', definition: 'Short for Representational State Transfer.' },
    { term: 'RPC', definition: 'Short for Remote Procedure Call.' },
    { term: 'Sampling', definition: 'A mechanism to control the amount of data exported. Most commonly used with the Tracing Data Source.' },
    { term: 'SDK', definition: 'Short for Software Development Kit. Refers to a telemetry SDK that denotes a Library that implements the OpenTelemetry API.' },
    { term: 'Semantic Conventions', definition: 'Defines standard names and values of Metadata in order to provide vendor-agnostic telemetry data.' },
    { term: 'Service', definition: 'A component of an Application. Multiple instances of a Service are typically deployed for high availability and scalability. A Service may be deployed in multiple locations.' },
    { term: 'Signal', definition: 'One of Traces, Metrics, or Logs.' },
    { term: 'Span', definition: 'Represents a single operation within a Trace.' },
    { term: 'Span Link', definition: 'A span link is a link between causally-related spans.' },
    { term: 'Specification', definition: 'Describes the cross-language requirements and expectations for all implementations.' },
    { term: 'Status', definition: 'The result of the operation. Typically used to indicate whether an error occurred.' },
    { term: 'Tag', definition: 'See Metadata.' },
    { term: 'Trace', definition: 'A DAG of Spans, where the edges between Spans are defined as parent/child relationship.' },
    { term: 'Tracer', definition: 'Responsible for creating Spans.' },
    { term: 'Transaction', definition: 'See Distributed Tracing.' },
    { term: 'zPages', definition: 'An in-process alternative to external exporters. When included, they collect and aggregate tracing and metrics information in the background; this data is served on web pages when requested.' },
  ];
  
  export default glossaryData;
  